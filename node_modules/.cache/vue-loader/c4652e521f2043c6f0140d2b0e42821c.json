{"remainingRequest":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/src/views/curso/Tema2.vue?vue&type=template&id=038e051a&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/src/views/curso/Tema2.vue","mtime":1756098407541},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gRW5mb3F1ZXMgZGUgbGEgYWRtaW5pc3RyYWNpw7NuJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5weC00LnB0LTQucHgtbWQtNS5wdC1tZC01LnBiLTAub3ZlcmZsb3ctaGlkZGVuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3QyLzEucG5nJywgYWx0PScnKQogICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTEucC00Lm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy0yLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvMi5zdmciKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgTG9zIGVuZm9xdWVzIGRlIGxhIGFkbWluaXN0cmFjacOzbiBzb24gbWFyY29zIHRlw7NyaWNvcyB5IHByw6FjdGljb3MsIGRpc2XDsWFkb3MgcGFyYSBhbmFsaXphciB5IGRpcmlnaXIgb3JnYW5pemFjaW9uZXMsIGRlIG1hbmVyYSBlZmVjdGl2YSwgY29uc2lkZXJhbmRvIHN1cyBwYXJ0aWN1bGFyaWRhZGVzLCBvYmpldGl2b3MgeSBlbCBlbnRvcm5vIGVuIGVsIHF1ZSBvcGVyYW4uIEVzdG9zIGVuZm9xdWVzIGluY2x1eWVuIHBlcnNwZWN0aXZhcyBjb21vIGxhIGh1bWFuYSwgZXN0cnVjdHVyYWwsIHNpc3TDqW1pY2EgeSBwb3Ntb2Rlcm5hLCBvZnJlY2llbmRvIGEgbG9zIGzDrWRlcmVzIGVtcHJlc2FyaWFsZXMgaGVycmFtaWVudGFzIHBhcmEgaW1wbGVtZW50YXIgdMOpY25pY2FzIGFkYXB0YWRhcyBhIGxhcyBkZW1hbmRhcyBvcmdhbml6YWNpb25hbGVzIHkgYSBsb3MgY2FtYmlvcyBlbiBlbCBjb250ZXh0byBlY29uw7NtaWNvLCBzb2NpYWwgeSBjdWx0dXJhbC4KICAgICAgICBwLm1iLTAgQ29uIGZ1bmRhbWVudG9zIGVuIGFzcGVjdG9zIGNvbW8gZ2xvYmFsaXphY2nDs24sIG1lam9yYSBjb250aW51YSB5IGZsZXhpYmlsaWRhZCwgbG9zIGVuZm9xdWVzIGFkbWluaXN0cmF0aXZvcyBhY3R1YWxlcywgYnJpbmRhbiBlc3RyYXRlZ2lhcyBlc3BlY8OtZmljYXMgcGFyYSBwb3RlbmNpYXIgbGEgaW5ub3ZhY2nDs24geSBsYSBlZmljaWVuY2lhLiBFc3RvIGZhY2lsaXRhIHF1ZSBsYXMgb3JnYW5pemFjaW9uZXMgZW5mcmVudGVuIHRyYW5zZm9ybWFjaW9uZXMgY29uc3RhbnRlcywgYXNlZ3VyYW5kbyBzdSBjb21wZXRpdGl2aWRhZCB5IHNvc3RlbmliaWxpZGFkIGVuIGVudG9ybm9zIGNvbXBsZWpvcyB5IGVuIGV2b2x1Y2nDs24uCgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMV0gRW5mb3F1ZSBjaWVudMOtZmljbyB5IGNsw6FzaWNvIGVuIGxhIGFkbWluaXN0cmFjacOzbiBkZSBlbXByZXNhcwogICAgLmJnLWNvbG9yLTMucC00Lm1iLTUKICAgICAgLnAtNAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0wKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTgKICAgICAgICAgICAgcC5tYi0wIFN1cmdlIGNvbW8gcmVzcHVlc3RhIGEgbGFzIHRyYW5zZm9ybWFjaW9uZXMgZGUgbGEgcmV2b2x1Y2nDs24gaW5kdXN0cmlhbCwgZXNwZWNpYWxtZW50ZSBmcmVudGUgYSBkb3MgZGVzYWbDrW9zIHByaW5jaXBhbGVzOyBlbCBkZXNvcmdhbml6YWRvIHkgYWNlbGVyYWRvIGNyZWNpbWllbnRvIGRlIGxhcyBlbXByZXNhcywgeSBsYSB1cmdlbmNpYSBkZSBvcHRpbWl6YXIgdGFudG8gbGEgZWZpY2llbmNpYSwgY29tbyBsYSBjb21wZXRpdGl2aWRhZCBlbiBsYXMgb3JnYW5pemFjaW9uZXMuIEVzdG9zIGZhY3RvcmVzIGZ1ZXJvbiBkZXRlcm1pbmFudGVzIHBhcmEgZXN0YWJsZWNlciBsYXMgYmFzZXMgZGUgZXN0ZSBlbmZvcXVlLgogICAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgICAuaW1nLXJlbAogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzMuc3ZnIikKICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBUZW9yw61hIGNpZW50w61maWNhCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90Mi80LnBuZyIpCiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMi5weC01LnB5LTQubWItNAogICAgICAgICAgcC5tYi0wICBUZW5pZW5kbyBlbiBjdWVudGEgYSBCb25hdHRpICgyMDIwKSwgZHVyYW50ZSBsYXMgcHJpbWVyYXMgZMOpY2FkYXMgZGVsIHNpZ2xvIFhYLCBmaWd1cmFzIGNvbW8gRnJlZGVyaWNrIFcuIFRheWxvciwgSGVucnkgTC4gR2FudHQsIEZyYW5rIHkgV2lsbGlhbSBHaWxicmV0aCBlbiBsYSBBZG1pbmlzdHJhY2nDs24gQ2llbnTDrWZpY2EsIGp1bnRvIGNvbiBIZW5yeSBGYXlvbCBlbiBlbCBFbmZvcXVlIEZ1bmNpb25hbCwgZGVzYXJyb2xsYXJvbiBtb2RlbG9zIGFkbWluaXN0cmF0aXZvcyBpbnNwaXJhZG9zIGVuIHByw6FjdGljYXMgZGUgZW1wcmVzYXMgZXVyb3BlYXMgeSBlc3RhZG91bmlkZW5zZXMuIEVzdGFzIHRlb3LDrWFzIHRlbsOtYW4gY29tbyBwcm9ww7NzaXRvIG9wdGltaXphciBsb3MgbcOpdG9kb3MgZGUgdHJhYmFqbywgbWVkaWFudGUgcHJpbmNpcGlvcyB0w6ljbmljb3MgeSBvcmdhbml6YXRpdm9zLCBzZW50YW5kbyBsYXMgYmFzZXMgZGUgdW5hIGNpZW5jaWEgYWRtaW5pc3RyYXRpdmEuIEVudHJlIHN1cyBwdW50b3MgY2VudHJhbGVzIGVzdGFiYW4gbGEgZ2VzdGnDs24gZWZpY2llbnRlIGRlIGxhcyBwbGFudGFzLCBsYSBhZG1pbmlzdHJhY2nDs24gZGUgbG9zIHJlY3Vyc29zIGh1bWFub3MgeSBsYSBpbXBsZW1lbnRhY2nDs24gZGUgc2lzdGVtYXMgZGUgcmVjb25vY2ltaWVudG8gc2FsYXJpYWwsIGNvbiBlbCBmaW4gZGUgbWVqb3JhciBlbCBkZXNlbXBlw7FvIGVuIGVsIGVudG9ybm8gZW1wcmVzYXJpYWwuIEVzdGFzIGFwb3J0YWNpb25lcyBoYW4gc2lkbyBmdW5kYW1lbnRhbGVzIHBhcmEgZWwgYXZhbmNlIGRlIGxhIGFkbWluaXN0cmFjacOzbiB5IGVsIHBlcmZlY2Npb25hbWllbnRvIGRlIGxhcyBlbXByZXNhcywgYSBsbyBsYXJnbyBkZWwgdGllbXBvLgogICAgICAgIHAubWItMCBMYSB0ZW9yw61hIGRlIGxhIGFkbWluaXN0cmFjacOzbiBjaWVudMOtZmljYSwgbmFjZSBjb21vIHJlc3B1ZXN0YSBhIGxhIG5lY2VzaWRhZCBkZSBhdW1lbnRhciBsYSBwcm9kdWN0aXZpZGFkIGVtcHJlc2FyaWFsIGRlYmlkbyBhIGxhIGVzY2FzZXogZGUgbWFubyBkZSBvYnJhIGVuIEVzdGFkb3MgVW5pZG9zLgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNC5tYi00CiAgICAgIC5weC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcihkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAuY29sLWxnLTEuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvNS5zdmciKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBEZSBtb2RvIHF1ZSBsYSBlZmljaWVuY2lhIGRlIGxvcyB0cmFiYWphZG9yZXMgc2UgY29udmlydGnDsyBlbiBlbCBlamUgY2VudHJhbCBwYXJhIGFsY2FuemFyIGRpY2hvIG9iamV0aXZvLiBGcmVkZXJpY2sgVy4gVGF5bG9yLCBIZW5yeSBMLiBHYW50dCwgeSBGcmFuayB5IExpbGlhbiBHaWxicmV0aCwgZnVlcm9uIGxvcyBwcmluY2lwYWxlcyBpbXB1bHNvcmVzIGRlIGVzdGEgdGVvcsOtYSwgaW50cm9kdWNpZW5kbyB1biBjb25qdW50byBkZSBlbGVtZW50b3MgcXVlIGJ1c2NhYmFuIHNpc3RlbWF0aXphciB5IG9wdGltaXphciBlbCB0cmFiYWpvLCBsb3MgY3VhbGVzIHNlIHZpc2x1bWJyYW4gYSBjb250aW51YWNpw7NuLgoKICAgIC50aXR1bG8tZmlndXJhLm1iLTIuZC1mbGV4KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgcC5tYi0wICNbYiBUYWJsYSAxLl0gQ2FyYWN0ZXLDrXN0aWNhcyBkZSBsYSBhZG1pbmlzdHJhY2nDs24gY2llbnTDrWZpY2EKICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICB0YWJsZQogICAgICAgIHRoZWFkCiAgICAgICAgICB0cgogICAgICAgICAgICB0aC53LTI1IENhdGVnb3LDrWEKICAgICAgICAgICAgdGggRGVzY3JpcGNpw7NuIHBvc2l0aXZhCiAgICAgICAgICAgIHRoIENyw610aWNhcyB5IGxpbWl0YWNpb25lcwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5mdy1ib2xkIEVzdGFuZGFyaXphY2nDs24KICAgICAgICAgICAgdGQgUHJvcHVlc3RhIGRlIG3DqXRvZG9zIGVzdMOhbmRhciBwYXJhIHJlYWxpemFyIHRhcmVhcyBkZSBmb3JtYSBlZmljaWVudGUuCiAgICAgICAgICAgIHRkIElnbm9yYSBsYSBkaXZlcnNpZGFkIGRlIHRyYWJhamFkb3JlcyB5IHN1cyBuZWNlc2lkYWRlcyBpbmRpdmlkdWFsZXMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5mdy1ib2xkIFNlbGVjY2nDs24gZGUgcGVyc29uYWwKICAgICAgICAgICAgdGQgRW5mb3F1ZSBlbiBoYWJpbGlkYWRlcyB5IGFwdGl0dWRlcyBlc3BlY8OtZmljYXMgcGFyYSBjYWRhIHB1ZXN0by4KICAgICAgICAgICAgdGQgTm8gY29uc2lkZXJhIGVsIGNvbnRleHRvIHNvY2lhbCBuaSBsYXMgbmVjZXNpZGFkZXMgc3VwZXJpb3JlcyBkZWwgZW1wbGVhZG8uCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5mdy1ib2xkIENhcGFjaXRhY2nDs24KICAgICAgICAgICAgdGQgT3JpZW50YWNpw7NuIHkgZm9ybWFjacOzbiBkZWwgcGVyc29uYWwgZW4gbcOpdG9kb3MgZXN0YW5kYXJpemFkb3MsIHBhcmEgbWVqb3JhciBlbCBkZXNlbXBlw7FvLgogICAgICAgICAgICB0ZCBMYSBjYXBhY2l0YWNpw7NuIGVzdMOhIGNlbnRyYWRhIGVuIGxhcyB0YXJlYXMsIG5vIGVuIGVsIGRlc2Fycm9sbG8gaW50ZWdyYWwgZGVsIHRyYWJhamFkb3IuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5mdy1ib2xkIFBsYW5lYWNpw7NuCiAgICAgICAgICAgIHRkIE9yZ2FuaXphY2nDs24gcHJldmlhIGRlbCB0cmFiYWpvLCBwYXJhIG1heGltaXphciBsYSBwcm9kdWN0aXZpZGFkLgogICAgICAgICAgICB0ZCBDYXJlbmNpYSBkZSBmbGV4aWJpbGlkYWQgcGFyYSBhZGFwdGFyIGxvcyBwbGFuZXMgYSBzaXR1YWNpb25lcyByZWFsZXMgeSBkaW7DoW1pY2FzLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQuZnctYm9sZCBJbmNlbnRpdm9zIHNhbGFyaWFsZXMKICAgICAgICAgICAgdGQgUmVjb25vY2ltaWVudG8gZGVsIGltcGFjdG8gZGUgbGEgY29tcGVuc2FjacOzbiBlY29uw7NtaWNhLCBjb21vIGVzdMOtbXVsbyBwYXJhIGVsIHJlbmRpbWllbnRvIGxhYm9yYWwuCiAgICAgICAgICAgIHRkIEVuZm9xdWUgZW4gaW5jZW50aXZvcyBtb25ldGFyaW9zIHNpbiBjb25zaWRlcmFyIG1vdGl2YWNpb25lcyBpbnRyw61uc2VjYXMgbyBwZXJzb25hbGVzLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQuZnctYm9sZCBFbmZvcXVlIGVuIHRhcmVhcwogICAgICAgICAgICB0ZCBBbsOhbGlzaXMgZGV0YWxsYWRvIGRlIHB1ZXN0b3MgeSB0YXJlYXMsIGNvbW8gYmFzZSBwYXJhIGxhIG1lam9yYSBjb250aW51YS4KICAgICAgICAgICAgdGQgRmFsdGEgZGUgY29uc2lkZXJhY2nDs24gcG9yIGxhcyBpZGVhcyB5IHN1Z2VyZW5jaWFzIGRlbCBlbXBsZWFkbywgbGltaXRhbmRvIGxhIGlubm92YWNpw7NuIHkgbGEgcmV0cm9hbGltZW50YWNpw7NuLgoKCgoKCgoKCgoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNS5hbGlnbi1pdGVtcy1jZW50ZXIoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAuY29sLXNtLTEyLmNvbC1sZy0zLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvNi5zdmciKQogICAgICAuY29sLXNtLTEyLmNvbC1sZy05CiAgICAgICAgLmJnLWNvbG9yLTUucHgtNS5weS00Lm1iLTAKICAgICAgICAgIHAubWItMCBPYnNlcnZhbW9zIGVuIGxhIHRhYmxhIGFudGVyaW9yLCBjw7NtbyBsYSBhZG1pbmlzdHJhY2nDs24gc2UgZXN0cnVjdHVyYSBhIHRyYXbDqXMgZGUgbGEgZXN0YW5kYXJpemFjacOzbiBkZSBwcm9jZXNvcyB5IG3DqXRvZG9zLCBvcmllbnTDoW5kb3NlIGhhY2lhIHVuIGVuZm9xdWUgYmFzYWRvIGVuIGVsIGFuw6FsaXNpcyB5IGxhIHBsYW5pZmljYWNpw7NuLiBMYSBjYXBhY2l0YWNpw7NuIHkgbGEgY29tcGVuc2FjacOzbiBqdWVnYW4gdW4gcGFwZWwgZXNlbmNpYWwgcGFyYSBvcHRpbWl6YXIgZWwgZGVzZW1wZcOxbyBkZWwgcGVyc29uYWwuIFNpbiBlbWJhcmdvLCBlc3RhIHZpc2nDs24gbm8gY29uc2lkZXJhIGxhcyBuZWNlc2lkYWRlcyBzb2NpYWxlcyBkZSBsb3MgdHJhYmFqYWRvcmVzLCBsbyBxdWUgZ2VuZXJhIGNpZXJ0YXMgbGltaXRhY2lvbmVzIHBhcmEgY29tcHJlbmRlciBzdSBpbnRlcmFjY2nDs24gZW4gZWwgZW50b3JubyBsYWJvcmFsLgogICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIFRlb3LDrWEgY2zDoXNpY2EKICAgIHAubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIExhIHRlb3LDrWEgY2zDoXNpY2EgZGUgSGVucnkgRmF5b2wsIHByb3BvbmUgcXVlIGxhIGVtcHJlc2EgZXMgdW4gc2lzdGVtYSBjb21wdWVzdG8gcG9yIGVsZW1lbnRvcyBpbnRlcmNvbmVjdGFkb3MsIGNlbnRyYWRvIGVuIGxhIG9yZ2FuaXphY2nDs24gZm9ybWFsIHkgc3UgZXN0cnVjdHVyYS4gCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTMucC00Lm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy0yLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvOC5zdmciKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgU2Vnw7puIEZheW9sLCBhZG1pbmlzdHJhciBpbXBsaWNhIHJlYWxpemFyIGZ1bmNpb25lcyBjb21vIHByZXZlciwgb3JnYW5pemFyLCBkaXJpZ2lyLCBjb29yZGluYXIgeSBjb250cm9sYXIsIGxhcyBjdWFsZXMgcGVybWl0ZW4gYWxpbmVhciBsYXMgYWN0aXZpZGFkZXMsIGNvbnNvbGlkYXIgbGEgZXN0cnVjdHVyYSBzb2NpYWwgZGUgbGEgZW1wcmVzYSB5IGdhcmFudGl6YXIgZWwgZXF1aWxpYnJpbyBlbiBsYXMgb3BlcmFjaW9uZXMuCiAgICAgICAgcC5tYi0zIEFkZW3DoXMsIEZheW9sIHNlw7FhbGEgcXVlIGxhIGFkbWluaXN0cmFjacOzbiBpbnRlcnZpZW5lIGRpcmVjdGFtZW50ZSBlbiBsYXMgcGVyc29uYXMsIHJlY29ub2NpZW5kbyBxdWUsIHRhbnRvIGxhcyBjaXJjdW5zdGFuY2lhcyBjb21vIGxvcyBpbmRpdmlkdW9zLCBzb24gZGl2ZXJzb3MgeSBlc3TDoW4gZW4gY29uc3RhbnRlIGNhbWJpby4gUG9yIGVzdGUgbW90aXZvLCBsYXMgcmVnbGFzIG5vIHB1ZWRlbiBzZXIgcsOtZ2lkYXMgeSBkZWJlbiBhZGFwdGFyc2UgYSBsYXMgbmVjZXNpZGFkZXMgZXNwZWPDrWZpY2FzIGRlIGNhZGEgc2l0dWFjacOzbi4gUGFyYSBjdW1wbGlyIGNvbiBzdSByb2wsIHVuIGFkbWluaXN0cmFkb3IgZGViZSBjb250YXIgY29uIGNhcGFjaWRhZGVzIGNvbW8gaW50ZWxpZ2VuY2lhLCBleHBlcmllbmNpYSB5IGhhYmlsaWRhZGVzIHBhcmEgdG9tYXIgZGVjaXNpb25lcyBxdWUgc2UgYWp1c3RlbiBhIGxvcyBkZXNhZsOtb3MgcHJlc2VudGVzLgogICAgICAgIHAubWItMC5mdy1ib2xkIEZheW9sIGRlc3RhY2EgcXVlIHRvZGEgZW1wcmVzYSBjdW1wbGUgc2VpcyBmdW5jaW9uZXMgYsOhc2ljYXMgYSBzYWJlcjoKICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvNy5wbmcnLCBhbHQ9JycpCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMi5tYi0wKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItMAogICAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5wZS14bC04LmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvOS5wbmcnKQogICAgICAgICAgLmNvbC0xMS5jb2wtbWQtOC5jb2wteGwtNwogICAgICAgICAgICBTbHlkZXJGKGNvbHVtbmFzPSJjb2wtMTIgY29sLWxnLTYiKQogICAgICAgICAgICAgIC5yb3cucHktNC5weC0zLmgtMTAwCiAgICAgICAgICAgICAgICAuY29sLTEwLm9mZnNldC0xLm9mZnNldC1tZC0wLmNvbC1tZC0xMi5zaGFkb3ctYXBwLnAtMy5weS1tZC01LnB4LW1kLTQuYmctY29sb3Itd2hpdGUKICAgICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC04LmNvbC1tZC00Lm1iLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3QyLzEwLnN2ZycgYWx0PSdBdmF0YXJUb3AnKQogICAgICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyIDEKICAgICAgICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgRnVuY2lvbmVzIHTDqWNuaWNhcywgcmVsYWNpb25hZGFzIGNvbiBsYSBwcm9kdWNjacOzbiBkZSBsYSBlbXByZXNhLgogICAgICAgICAgICAgIC5yb3cucHktNC5weC0zLmgtMTAwCiAgICAgICAgICAgICAgICAuY29sLTEwLm9mZnNldC0xLm9mZnNldC1tZC0wLmNvbC1tZC0xMi5zaGFkb3ctYXBwLnAtMy5weS1tZC01LnB4LW1kLTQuYmctY29sb3Itd2hpdGUKICAgICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC04LmNvbC1tZC00Lm1iLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3QyLzExLnN2ZycgYWx0PSdBdmF0YXJUb3AnKQogICAgICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyIDIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgRnVuY2lvbmVzIGNvbWVyY2lhbGVzLCByZWxhY2lvbmFkYXMgY29uIGxhIGNvbXByYSB5IHZlbnRhIG8gZWwgaW50ZXJjYW1iaW8uCiAgICAgICAgICAgICAgLnJvdy5weS00LnB4LTMuaC0xMDAKICAgICAgICAgICAgICAgIC5jb2wtMTAub2Zmc2V0LTEub2Zmc2V0LW1kLTAuY29sLW1kLTEyLnNoYWRvdy1hcHAucC0zLnB5LW1kLTUucHgtbWQtNC5iZy1jb2xvci13aGl0ZQogICAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgICAuY29sLTguY29sLW1kLTQubWItNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvMTIuc3ZnJyBhbHQ9J0F2YXRhclRvcCcpCiAgICAgICAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIgMwogICAgICAgICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBGdW5jaW9uZXMgZmluYW5jaWVyYXMsIHJlbGFjaW9uYWRhcyBjb24gbGEgYsO6c3F1ZWRhIHkgZ2VzdGnDs24gZGUgY2FwaXRhbC4KICAgICAgICAgICAgICAucm93LnB5LTQucHgtMy5oLTEwMAogICAgICAgICAgICAgICAgLmNvbC0xMC5vZmZzZXQtMS5vZmZzZXQtbWQtMC5jb2wtbWQtMTIuc2hhZG93LWFwcC5wLTMucHktbWQtNS5weC1tZC00LmJnLWNvbG9yLXdoaXRlCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtOC5jb2wtbWQtNC5tYi00LmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90Mi8xMy5zdmcnIGFsdD0nQXZhdGFyVG9wJykKICAgICAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlciA0CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEZ1bmNpb25lcyBkZSBzZWd1cmlkYWQsIHJlbGFjaW9uYWRhcyBjb24gbGEgcHJvdGVjY2nDs24gZGUgbG9zIGJpZW5lcyB5IGxhcyBwZXJzb25hcy4KICAgICAgICAgICAgICAucm93LnB5LTQucHgtMy5oLTEwMAogICAgICAgICAgICAgICAgLmNvbC0xMC5vZmZzZXQtMS5vZmZzZXQtbWQtMC5jb2wtbWQtMTIuc2hhZG93LWFwcC5wLTMucHktbWQtNS5weC1tZC00LmJnLWNvbG9yLXdoaXRlCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtOC5jb2wtbWQtNC5tYi00LmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90Mi8xNC5zdmcnIGFsdD0nQXZhdGFyVG9wJykKICAgICAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlciA1CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEZ1bmNpb25lcyBjb250YWJsZXMsIHJlbGFjaW9uYWRhcyBjb24gbG9zIGludmVudGFyaW9zLCBsb3MgcmVnaXN0cm9zLCBsb3MgYmFsYW5jZXMsIGxvcyBjb3N0b3MgeSBsYXMgZXN0YWTDrXN0aWNhcy4KICAgICAgICAgICAgICAucm93LnB5LTQucHgtMy5oLTEwMAogICAgICAgICAgICAgICAgLmNvbC0xMC5vZmZzZXQtMS5vZmZzZXQtbWQtMC5jb2wtbWQtMTIuc2hhZG93LWFwcC5wLTMucHktbWQtNS5weC1tZC00LmJnLWNvbG9yLXdoaXRlCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtOC5jb2wtbWQtNC5tYi00LmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90Mi8xNS5zdmcnIGFsdD0nQXZhdGFyVG9wJykKICAgICAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlciA2CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEZ1bmNpb25lcyBhZG1pbmlzdHJhdGl2YXMsIHJlbGFjaW9uYWRhcyBjb24gbGEgaW50ZWdyYWNpw7NuIGRlIGxhcyBvdHJhcyBjaW5jbyBmdW5jaW9uZXMgZW4gbGEgZGlyZWNjacOzbi4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci00Lm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAucHgtNS5weS00CiAgICAgICAgcC5tYi0wIEVuIGxhIGVtcHJlc2EgZnVuY2lvbmFsIHF1ZSBwcm9wb25lIEZheW9sLCBjb25zaWRlcmEgbmVjZXNhcmlvIGFwbGljYXIgcHJpbmNpcGlvcyBvcmdhbml6YWNpb25hbGVzIHF1ZSBwcm9tdWV2YW4gZWwgZm9ydGFsZWNpbWllbnRvIGRlIHN1IGVzdHJ1Y3R1cmEuIEVzdG9zIHByaW5jaXBpb3MgZmFjaWxpdGFuIGxhIGNvb3JkaW5hY2nDs24gZGUgbGFzIGFjdGl2aWRhZGVzIHkgZ2FyYW50aXphbiB1biBkZXNhcnJvbGxvIGVmaWNpZW50ZSwgbG8gcXVlIGEgc3UgdmV6IGdlbmVyYSBhcm1vbsOtYSBlbiBsYXMgb3BlcmFjaW9uZXMgeSBjb250cmlidXllIGFsIGNyZWNpbWllbnRvIHNvc3RlbmlkbyBkZSBsYSBvcmdhbml6YWNpw7NuLgoKICAgIC50aXR1bG8tZmlndXJhLm1iLTIuZC1mbGV4KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgcC5tYi0wICNbYiBGaWd1cmEgMS5dIFByaW5jaXBpb3MgZGUgSGVucnkgRmF5b2wuCiAgICAuYmctY29sb3ItNi5wLTQubWItNShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0wLnB5LTQKICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtdXAiKS5tYi0wCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3QyLzE2LnN2ZycsIGFsdD0nJykubWItMAogICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90Mi8xNy5wbmciKQogICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTIucHgtNS5weS00Lm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy0yLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvMTguc3ZnIikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIExhIGNhcGFjaWRhZCBkZSBsb3MgYWRtaW5pc3RyYWRvcmVzIHBhcmEgb3JpZW50YXIgZWZpY2F6bWVudGUgbG9zIHByb2Nlc29zLCBkZXBlbmRlIGRlIHVuYSBiYXNlIHPDs2xpZGEgZW4gbGEgb3JnYW5pemFjacOzbiwgbGEgY3VhbCBzZSBsb2dyYSBhIHRyYXbDqXMgZGUgbG9zIHByaW5jaXBpb3MgZXN0YWJsZWNpZG9zIHBvciBGYXlvbC4gRXN0b3MgcHJpbmNpcGlvcyBubyBzb2xvIGZvcnRhbGVjZW4gbGEgZXN0cnVjdHVyYSBvcmdhbml6YWNpb25hbCwgc2lubyBxdWUgdGFtYmnDqW4gcGVybWl0ZW4gZGluYW1pemFyIHN1cyBvcGVyYWNpb25lcywgcGFyYSBhbGNhbnphciBsb3Mgb2JqZXRpdm9zIHByb3B1ZXN0b3MuIAogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMy5tYi01KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgLnB4LTUucHktNAogICAgICAgICN0XzJfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICBoMiAjW3NwYW4gMi4yXSBFbmZvcXVlIGh1bWFuaXN0YSBlbiBsYSBhZG1pbmlzdHJhY2nDs24gZGUgZW1wcmVzYXMKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTgKICAgICAgICAgICAgcC5tYi0wIEVuIGxvcyBhw7FvcyAzMCwgZW4gRXN0YWRvcyBVbmlkb3MsIGxhIFRlb3LDrWEgZGUgbGFzIFJlbGFjaW9uZXMgSHVtYW5hcyBtYXJjw7MgdW4gY2FtYmlvIHNpZ25pZmljYXRpdm8gZW4gbGEgYWRtaW5pc3RyYWNpw7NuLCBkZXNwbGF6YW5kbyBsYSBhdGVuY2nDs24gZGUgbGFzIHRhcmVhcyB5IGVzdHJ1Y3R1cmFzLCBoYWNpYSBlbCBwYXBlbCBkZSBsYXMgcGVyc29uYXMgZGVudHJvIGRlIGxhcyBvcmdhbml6YWNpb25lcy4gRXN0ZSBlbmZvcXVlIGh1bWFuaXN0YSwgcmVwcmVzZW50YWRvIHBvciBhdXRvcmVzIGNvbW8gTWFyeSBQYXJrZXIgRm9sbGV0LCBFbHRvbiBNYXlvLCBGcmVkZXJpY2sgSXJ2aW5nIEhlcnpiZXJnLCBBYnJhaGFtIE1hc2xvdyB5IERvdWdsYXMgTWNHcmVnb3IsIHN1cmdpw7MgY29tbyB1bmEgcmVzcHVlc3RhIGFsIHBlbnNhbWllbnRvIGNsw6FzaWNvLCBxdWUgcGVyY2liw61hIGEgbGFzIGVtcHJlc2FzIGNvbW8gbcOhcXVpbmFzLiBBbXBsaWVtb3MgbGEgaW5mb3JtYWNpw7NuIHNvYnJlIGNhZGEgdW5vIGRlIGVsbG9zOgogICAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3QyLzE5LnN2ZycsIGFsdD0nJykubWItMAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTQucC01Lm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBTbHlkZXJBKHRpcG89J2InKS5iZy13aGl0ZQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5wLTUKICAgICAgICAgIC5jb2wtbGctNS5jb2wtNy5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvMjAucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy03Lm1iLWxnLTAubWItMwogICAgICAgICAgICBoNCBFbHRvbiBNYXlvCiAgICAgICAgICAgIHAubWItMCAgRWx0b24gTWF5bywgYSB0cmF2w6lzIGRlIGxhIGV4cGVyaWVuY2lhIGRlIEhhd3Rob3JuZSwgZXZpZGVuY2nDsyBxdWUgbGFzIHJlbGFjaW9uZXMgZ3J1cGFsZXMgeSBsYXMgZXN0cnVjdHVyYXMgaW5mb3JtYWxlcyBkZW50cm8gZGUgdW5hIG9yZ2FuaXphY2nDs24sIHNvbiBmYWN0b3JlcyBjbGF2ZXMgcXVlIGFmZWN0YW4gbGEgc2F0aXNmYWNjacOzbiBsYWJvcmFsIHksIGNvbnNlY3VlbnRlbWVudGUsIGxhIHByb2R1Y3RpdmlkYWQuCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5wLTUKICAgICAgICAgIC5jb2wtbGctNS5jb2wtNy5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvMjEucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy03Lm1iLWxnLTAubWItMwogICAgICAgICAgICBoNCBNYXJ5IFBhcmtlciBGb2xsZXQKICAgICAgICAgICAgcC5tYi0wIE1hcnkgUGFya2VyIEZvbGxldCwgZGVzdGFjw7MgbGEgcmVsZXZhbmNpYSBkZSBsb3MgZXF1aXBvcyBkZSB0cmFiYWpvIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyB5IGxhIG5lY2VzaWRhZCBkZSBlc3RhYmxlY2VyIHVuYSBjb25leGnDs24gZW50cmUgbG9zIG5pdmVsZXMgb3BlcmF0aXZvcyB5IGVzdHJhdMOpZ2ljb3MsIHJlc2FsdGFuZG8gbGEgaW1wb3J0YW5jaWEgZGUgdW5hIHBsYW5pZmljYWNpw7NuIGVmZWN0aXZhIHkgdW4gY29udGFjdG8gZGlyZWN0byBlbiBsb3MgcHJvY2Vzb3Mgb3JnYW5pemF0aXZvcyAoU2FsZ2FkbyBCZW7DrXRleiwgZXQgYWwuIDIwMTYpLgoKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIucC01CiAgICAgICAgICAuY29sLWxnLTUuY29sLTcuZC1ub25lLmQtbGctYmxvY2s6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3QyLzIyLnBuZycsIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctNy5tYi1sZy0wLm1iLTMKICAgICAgICAgICAgaDQgQWJyYWhhbSBNYXNsb3cKICAgICAgICAgICAgcC5tYi0wIEFicmFoYW0gTWFzbG93LCBjb24gc3UgVGVvcsOtYSBkZSBsYSBKZXJhcnF1w61hIGRlIGxhcyBOZWNlc2lkYWRlcywgcHJvcHVzbyBxdWUgbGEgbW90aXZhY2nDs24gZGUgbGFzIHBlcnNvbmFzIHNlIGJhc2EgZW4gbGEgc2F0aXNmYWNjacOzbiBwcm9ncmVzaXZhIGRlIGNpbmNvIG5pdmVsZXMgZGUgbmVjZXNpZGFkZXM6IGZpc2lvbMOzZ2ljYXMsIHNlZ3VyaWRhZCwgcGVydGVuZW5jaWEsIGVzdGltYSB5IGF1dG9ycmVhbGl6YWNpw7NuLiBBdW5xdWUgZXN0YSB0ZW9yw61hIGVzIHJlY29ub2NpZGEsIHRhbWJpw6luIGhhIHNpZG8gY3Vlc3Rpb25hZGEgcG9yIHN1IGxpbWl0YWRhIGFwbGljYWJpbGlkYWQgYSBvdHJvcyBjb250ZXh0b3MgY3VsdHVyYWxlcyAoQm9uYXR0aSwgMjAyMCkuCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5wLTUKICAgICAgICAgIC5jb2wtbGctNS5jb2wtNy5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvMjMucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy03Lm1iLWxnLTAubWItMwogICAgICAgICAgICBoNCBGcmVkZXJpY2sgSXJ2aW5nIEhlcnpiZXJnCiAgICAgICAgICAgIHAubWItMCBGcmVkZXJpY2sgSXJ2aW5nIEhlcnpiZXJnLCBlbiBzdSBUZW9yw61hIEJpZmFjdG9yaWFsLCBkaWZlcmVuY2lhIGVudHJlIG5lY2VzaWRhZGVzIGhpZ2nDqW5pY2FzLCB2aW5jdWxhZGFzIGFsIGVudG9ybm8gbGFib3JhbCwgeSBuZWNlc2lkYWRlcyBtb3RpdmFjaW9uYWxlcywgcmVsYWNpb25hZGFzIGNvbiBsYSBuYXR1cmFsZXphIG1pc21hIGRlbCB0cmFiYWpvLiBTZWfDum4gZXN0ZSBtb2RlbG8sIGxhIHZlcmRhZGVyYSBzYXRpc2ZhY2Npw7NuIGxhYm9yYWwgc2UgbG9ncmEgYWwgY3VtcGxpciBjb24gZXN0YXMgw7psdGltYXMsIGF1bnF1ZSBzaWd1ZSBzaWVuZG8gdW4gZGVzYWbDrW8gcGFyYSBsYXMgZW1wcmVzYXMsIGZvbWVudGFyIHVuYSBtb3RpdmFjacOzbiBpbnRyw61uc2VjYSBlZmVjdGl2YSAoQm9uYXR0aSwgMjAyMCkuCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5wLTUKICAgICAgICAgIC5jb2wtbGctNS5jb2wtNy5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvMjQucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy03Lm1iLWxnLTAubWItMwogICAgICAgICAgICBoNCBEb3VnbGFzIE1jR3JlZ29yCiAgICAgICAgICAgIHAubWItMCBEb3VnbGFzIE1jR3JlZ29yIGZvcm11bMOzIGxhcyBUZW9yw61hcyBYIHkgWSwgcGFyYSBkZXNjcmliaXIgZG9zIGVzdGlsb3MgZGUgbGlkZXJhemdvIG9wdWVzdG9zLiBNaWVudHJhcyBxdWUgbGEgVGVvcsOtYSBYIGNvbnNpZGVyYSBhIGxvcyBlbXBsZWFkb3MgY29tbyBwZXJlem9zb3MgeSBkZXBlbmRpZW50ZXMgZGUgc3VwZXJ2aXNpw7NuLCBsYSBUZW9yw61hIFkgbG9zIHZpc3VhbGl6YSBjb21vIHJlc3BvbnNhYmxlcyB5IGNhcGFjZXMgZGUgaW52b2x1Y3JhcnNlIGVuIHByb2Nlc29zIGVzdHJhdMOpZ2ljb3MuIEVzdGUgZW5mb3F1ZSBkZXN0YWNhIGxhIGltcG9ydGFuY2lhIGRlIHVuIGxpZGVyYXpnbyBxdWUgdmFsb3JlIHkgcG90ZW5jaWUgZWwgcmVjdXJzbyBodW1hbm8sIGNvbW8gdW4gZmFjdG9yIGNsYXZlIHBhcmEgZWwgw6l4aXRvIG9yZ2FuaXphY2lvbmFsIChHdXRpw6lycmV6IEFyYWfDs24sIDIwMTYpLgoKICAgICN0XzJfMy50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjNdIE90cm9zIGVuZm9xdWVzCiAgICBwLm1iLTMuZnctYm9sZChkYXRhLWFvcz0iZmxpcC11cCIpIEEgY29udGludWFjacOzbiwgY29ub3pjYW1vcyBvdHJvcyBlbmZvcXVlcyBkZSBsYSBhZG1pbmlzdHJhY2nDs24uCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy03CiAgICAgICAgICAgIGgyLm1iLTQgT3Ryb3MgZW5mb3F1ZXMKICAgICAgICAgICAgcC5tYi00ICBFbiBsYSBldm9sdWNpw7NuIGRlbCBwZW5zYW1pZW50byBhZG1pbmlzdHJhdGl2bywgbG9zIGVuZm9xdWVzIG5lb2Nsw6FzaWNvLCBlc3RydWN0dXJhbGlzdGEsIGJ1cm9jcsOhdGljbyB5IGRlbCBjb21wb3J0YW1pZW50byBoYW4ganVnYWRvIHVuIHBhcGVsIGNsYXZlIGVuIGxhIGFkYXB0YWNpw7NuIGRlIGxhcyBvcmdhbml6YWNpb25lcyBhIGNvbnRleHRvcyBjb21wbGVqb3MgeSBjYW1iaWFudGVzLiBFbCBQREYgI1tiIE90cm9zIGVuZm9xdWVzXSwgYW5hbGl6YSBsYXMgYXBvcnRhY2lvbmVzIGRlIGF1dG9yZXMgY29tbyBQZXRlciBEcnVja2VyLCBIYXJvbGQgS29vbnR6IHkgV2lsbGlhbSBPdWNoaSBlbiBlbCBkZXNhcnJvbGxvIGRlbCBlbmZvcXVlIG5lb2Nsw6FzaWNvLCBhc8OtIGNvbW8gbGFzIGNvbnRyaWJ1Y2lvbmVzIGRlIE1heCBXZWJlciB5IG90cm9zIHRlw7NyaWNvcyBlbiBsb3MgbW9kZWxvcyBlc3RydWN0dXJhbGlzdGFzIHkgYnVyb2Nyw6F0aWNvcy4gQWRlbcOhcywgc2UgYWJvcmRhIGxhIHRlb3LDrWEgZGVsIGNvbXBvcnRhbWllbnRvIG9yZ2FuaXphY2lvbmFsLCBkZXN0YWNhbmRvIGVsIHBhcGVsIGRlIGxhIG1vdGl2YWNpw7NuIGh1bWFuYSB5IGVsIGRlc2Fycm9sbG8gb3JnYW5pemFjaW9uYWwgY29tbyBlbGVtZW50b3MgZnVuZGFtZW50YWxlcyBwYXJhIGxhIG1lam9yYSBjb250aW51YSBkZSBsYXMgb3JnYW5pemFjaW9uZXMgZW4gZW50b3Jub3MgZGluw6FtaWNvcy4KICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9vdHJvc19lbmZvcXVlcy5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IE90cm9zIGVuZm9xdWVzCiAgICAgICAgICAuY29sLWxnLTUuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90Mi8yNS5wbmcnLCBhbHQ9JycpCiAgICAjdF8yXzQudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi40XSBFbmZvcXVlIGRlIHNpc3RlbWFzIGVuIGxhIGFkbWluaXN0cmFjacOzbiBkZSBlbXByZXNhcwogICAgcC5tYi0zLmZ3LWJvbGQoZGF0YS1hb3M9ImZsaXAtdXAiKSBDb250aW51ZW1vcyBjb24gZWwgZXN0dWRpbyBkZSBsb3MgZW5mb3F1ZXMsIHBhcmEgY29ub2NlciBhaG9yYSBlbCBlbmZvcXVlIGRlIHNpc3RlbWFzIGVuIGxhIGFkbWluaXN0cmFjacOzbiBkZSBlbXByZXNhczoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzI2LnBuZyIpCiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTgKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICBkaXYodGl0dWxvPSJUZW9yw61hIGdlbmVyYWwgZGUgbG9zIHNpc3RlbWFzICIpIFByb3B1ZXN0YSBwb3IgTHVkd2lnIFZvbiBCZXJ0YWxhbmZmeSwgc3VyZ2UgY29tbyB1biBlbmZvcXVlIGludGVncmFkb3IgaW5zcGlyYWRvIGVuIGxhIGJpb2xvZ8OtYSB5IGxhIGZpbG9zb2bDrWEgZGUgYXV0b3JlcyBjb21vIExlaWJuaXogeSBOaWNvbMOhcyBkZSBDdXNhLiBBcGxpY2FkYSBhIGxhIGFkbWluaXN0cmFjacOzbiwgcmV0b21hIGlkZWFzIGRlIENoZXN0ZXIgQmFybmFyZCBkZSAxOTM4LCBxdWllbmVzIHlhIGNvbmNlYsOtYW4gYSBsYXMgb3JnYW5pemFjaW9uZXMgY29tbyBzaXN0ZW1hcyBpbnRlcnJlbGFjaW9uYWRvcyAoU2FsZ2FkbyBCZW7DrXRleiBldCBhbC4gMjAxNikuCiAgICAgICAgICBkaXYodGl0dWxvPSJTaXN0ZW1hIHkgZGVmaW5pY2nDs24iKSBTZSBkZWZpbmUgY29tbyB1biBjb25qdW50byBkZSBwYXJ0ZXMgY29uZWN0YWRhcyBxdWUgZnVuY2lvbmFuIGNvbW8gdW4gdG9kbywgY2xhc2lmaWPDoW5kb3NlIGVuIHNpc3RlbWFzIGNlcnJhZG9zLCBzaW4gaW50ZXJhY2Npw7NuIGNvbiBlbCBlbnRvcm5vLCB5IGFiaWVydG9zLCBlbiBjb25zdGFudGUgcmVsYWNpw7NuIGNvbiBlc3RlLiBMYXMgb3JnYW5pemFjaW9uZXMgbW9kZXJuYXMgb3BlcmFuIGNvbW8gc2lzdGVtYXMgYWJpZXJ0b3MsIHByb2Nlc2FuZG8gaW5zdW1vcyBkZWwgZW50b3JubywgdHJhbnNmb3Jtw6FuZG9sb3MgZW4gcHJvZHVjdG9zIHkgcmV0cm9hbGltZW50w6FuZG9zZSBkZSBzdSBpbXBhY3RvIGVuIGVsIGFtYmllbnRlLiBFc3RlIHByb2Nlc28gcmVxdWllcmUgdW5hIGNvb3JkaW5hY2nDs24gZWZlY3RpdmEsIHN1YnJheWFuZG8gbGEgcmVsZXZhbmNpYSBkZWwgbGlkZXJhemdvIGdlcmVuY2lhbC4KICAgICAgICAgIGRpdih0aXR1bG89IkNsYXNpZmljYWNpw7NuIHBvciBjb25zdGl0dWNpw7NuIHkgamVyYXJxdcOtYSBkZSBzaXN0ZW1hcyIpIEFkaWNpb25hbG1lbnRlLCBsb3Mgc2lzdGVtYXMgcHVlZGVuIHNlciBhYnN0cmFjdG9zLCBjb21vIHBsYW5lcyBlIGlkZWFzLCBvIGbDrXNpY29zLCBjb21vIG1hcXVpbmFyaWEuIENhZGEgc2lzdGVtYSBlc3TDoSBpbnRlZ3JhZG8gZW4gamVyYXJxdcOtYXMgbWF5b3JlczogbWFjcm9zaXN0ZW1hcywgcXVlIGxvcyBjb250aWVuZW4sIHkgc3VwcmFzaXN0ZW1hcywgcXVlIGFncnVwYW4gbcO6bHRpcGxlcyBzaXN0ZW1hcyBpbnRlcnJlbGFjaW9uYWRvcy4gRW4gbGFzIGVtcHJlc2FzLCBsb3MgZWxlbWVudG9zIGNsYXZlcyBpbmNsdXllbiBpbnN1bW9zLCBwcm9jZXNvcywgcHJvZHVjdG9zIHkgcmV0cm9hbGltZW50YWNpw7NuLCBpbnRlcmFjdHVhbmRvIGRpbsOhbWljYW1lbnRlIHBhcmEgZ2FyYW50aXphciBlZmljYWNpYSBvcmdhbml6YWNpb25hbC4KICAgICAgICAgIGRpdih0aXR1bG89IkludGVyZGlzY2lwbGluYXJpZWRhZCIpIEVzIHVuIGVqZSBjZW50cmFsIGVuIGVzdGEgdGVvcsOtYSwgYWwgcGVybWl0aXIgcXVlIG1vZGVsb3MgZGUgZGlzdGludGFzIGNpZW5jaWFzLCBjb21vIGxhIHNvY2lvbG9nw61hLCBlbnJpcXVlemNhbiBlbCBhbsOhbGlzaXMgb3JnYW5pemFjaW9uYWwuIFdhbHRlciBCdWNsZXkgeSBvdHJvcyBhdXRvcmVzIHNlw7FhbGFuIHF1ZSBlc3RvcyBlbmZvcXVlcyBubyBzb2xvIGZvcnRhbGVjZW4gbGEgYWRtaW5pc3RyYWNpw7NuIGNpZW50w61maWNhLCBzaW5vIHF1ZSB0YW1iacOpbiBzdXBlcmFuIHZpc2lvbmVzIHVuaWRpbWVuc2lvbmFsZXMsIHByb21vdmllbmRvIHVuYSBjb21wcmVuc2nDs24gaW50ZWdyYWwgeSBwcsOhY3RpY2EgZGUgbGFzIG9yZ2FuaXphY2lvbmVzLgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5weC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy0xLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzI3LnN2ZyIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wIEVuIGxvcyBzaXN0ZW1hcyBvcmdhbml6YWNpb25hbGVzLCBlbCBlbnRvcm5vIGp1ZWdhIHVuIHBhcGVsIGVzZW5jaWFsIGNvbW8gdW4gZWxlbWVudG8gYWRpY2lvbmFsIGVuIGxvcyBzaXN0ZW1hcyBhYmllcnRvcywgaW5mbHV5ZW5kbyB0YW50byBlbiBsb3MgcHJvY2Vzb3MsIGNvbW8gZW4gbG9zIHJlc3VsdGFkb3MuIEVuIGVzdG9zIHNpc3RlbWFzIGVuY29udHJhbW9zOgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0yLm1iLTAoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAucC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy00Lm1iLWxnLTAubWItMwogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQuaC0xMDAuYnItMTUKICAgICAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZS5kLW5vbmUuZC1sZy1ibG9jayhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzI4LnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICAgICAgaDQubWItMi50ZXh0LWNlbnRlciBJbnN1bW9zICNbaSAoaW5wdXRzKV0KICAgICAgICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgU29uIGxvcyByZWN1cnNvcyBpbmljaWFsZXMgcXVlIGFsaW1lbnRhbiBlbCBzaXN0ZW1hLCBzZSB0cmFuc2Zvcm1hbiBhIHRyYXbDqXMgZGUgdW4gcHJvY2VzbywgdW5hIHNlcmllIGRlIGFjdGl2aWRhZGVzIG9yZ2FuaXphZGFzIHF1ZSBpbnZvbHVjcmFuIGxhIGludGVyYWNjacOzbiBjb24gb3Ryb3Mgc3Vic2lzdGVtYXMuCiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy00Lm1iLWxnLTAubWItMwogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQuaC0xMDAuYnItMTUKICAgICAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZS5kLW5vbmUuZC1sZy1ibG9jayhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzI5LnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICAgICAgaDQubWItMi50ZXh0LWNlbnRlciBQcm9kdWN0byAjW2kgKG91dHB1dCldCiAgICAgICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVzIGVsIHJlc3VsdGFkbyBkZSBlc3RhIHRyYW5zZm9ybWFjacOzbiB5IHJlcHJlc2VudGEgZWwgYmllbiBvIHNlcnZpY2lvIGZpbmFsLCBxdWUgY3VtcGxlIGNvbiBsYSBtaXNpw7NuIGRlIGxhIG9yZ2FuaXphY2nDs24uIFBhcmEgbWFudGVuZXIgeSBtZWpvcmFyIGVzdGEgZGluw6FtaWNhLgogICAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5tYi1sZy0wLm1iLTMKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLmgtMTAwLmJyLTE1CiAgICAgICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2UuZC1ub25lLmQtbGctYmxvY2soc3JjPSJAL2Fzc2V0cy9jdXJzby90Mi8zMC5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgICAgIGg0Lm1iLTIudGV4dC1jZW50ZXIgUmV0cm9hbGltZW50YWNpw7NuICNbaSAoZmVlZGJhY2spXQogICAgICAgICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBQZXJtaXRlIGV2YWx1YXIgY8OzbW8gZWwgZW50b3JubyBwZXJjaWJlIGxvcyBwcm9kdWN0b3MgbyBzZXJ2aWNpb3MgZ2VuZXJhZG9zLiBFc3RvIGZhY2lsaXRhIGFqdXN0YXIgcHJvY2Vzb3MgeSBjb25jZXB0b3MgcGFyYSBvcHRpbWl6YXIgZWwgZGVzZW1wZcOxbyBkZWwgc2lzdGVtYS4KICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTMubWItMChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5wLTQucC1tZC01IAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0wCiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgICAgIHAubWItMyBTZWfDum4gbGEgdGVvcsOtYSBnZW5lcmFsIGRlIHNpc3RlbWFzIGRlIEx1ZHdpZyBWb24gQmVydGFsYW5mZnksIHRvZG8gc2lzdGVtYSBmb3JtYSBwYXJ0ZSBkZSB1biBzaXN0ZW1hIG1heW9yLCBpbnRlcmFjdMO6YSBjb250aW51YW1lbnRlIGNvbiBzdSBlbnRvcm5vIHkgZnVuY2lvbmEgY29tbyB1biBzaXN0ZW1hIGFiaWVydG8uCiAgICAgICAgICAgIC5iZy1jb2xvci0zLnAtNC5tYi00CiAgICAgICAgICAgICAgcC5tYi0wIEJvbmF0dGkgKDIwMjApLCBkZXN0YWNhIHF1ZSBsb3Mgc2lzdGVtYXMgYWJpZXJ0b3MgZGVwZW5kZW4gZGUgZXN0YSBpbnRlcmFjY2nDs24geSBkZWJlbiBjb25zaWRlcmFyIHRhbnRvIGxvcyBpbnB1dHMsIHByb2Nlc29zLCAjW2kgb3V0cHV0c10sIGZlZWRiYWNrIHkgZWwgZW50b3JubywgY29tbyBlbGVtZW50b3MgZnVuZGFtZW50YWxlcy4KICAgICAgICAgICAgcC5tYi0wLmZ3LWJvbGQgU2Vnw7puIGVsIHB1bnRvIGRlIHZpc3RhIGRlIEJvbmF0dGkgKDIwMjApLCBsb3Mgc2lzdGVtYXMgYWJpZXJ0b3MsIGNvbmRpY2lvbmFudGVzIGRlIGxhcyBvcmdhbml6YWNpb25lcywgcHJlc2VudGFuIGxhcyBzaWd1aWVudGVzIGNhcmFjdGVyw61zdGljYXM6CiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy00LmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzMxLnN2ZyIpCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci02Lm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAucHgtNS5weS00CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTAKICAgICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTEwCiAgICAgICAgICAgIEltYWdlbkluZm9ncmFmaWNhLmNvbG9yLXNlY3VuZGFyaW8ubWItMAogICAgICAgICAgICAgIHRlbXBsYXRlKHYtc2xvdDppbWFnZW4pCiAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdDIvMzguc3ZnJykKICAgICAgICAgICAgICAudGFyamV0YS5iZy1jb2xvci13aGl0ZS5wLTMoeD0iNzIlIiB5PSI3NSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBwLmZ3LWJvbGQubWItMyBSZXNpc3RlbmNpYQogICAgICAgICAgICAgICAgcC5tYi0wIEVzdGFibGVjZSBtZWRpZGFzIHBhcmEgbGEgcHJvdGVjY2nDs24geSBQb3Igc3UgbmF0dXJhbGV6YSBhYmllcnRhLCBsYXMgb3JnYW5pemFjaW9uZXMgc29uIHZ1bG5lcmFibGVzIGEgaW5mbHVlbmNpYXMgZXh0ZXJuYXMuIFNpbiBlbWJhcmdvLCBkZWJlbiBkZXNhcnJvbGxhciBtZWNhbmlzbW9zIHBhcmEgc3VwZXJhciBlc3RhcyBhZmVjdGFjaW9uZXMsIG1hbnRlbmllbmRvIHN1IGVzZW5jaWEgeSBhcHJvdmVjaGFuZG8gZWwgYXByZW5kaXphamUgcXVlIGVzdG8gZ2VuZXJhLgoKICAgICAgICAgICAgICAKICAgICAgICAgICAgICAudGFyamV0YS5iZy1jb2xvci13aGl0ZS5wLTMoeD0iNjkuNSUiIHk9IjU3JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgIHAuZnctYm9sZC5tYi0zIE1vcmZvZ8OpbmVzaXMKICAgICAgICAgICAgICAgIHAubWItMCBMYXMgb3JnYW5pemFjaW9uZXMgcG9zZWVuIHVuYSBjYXBhY2lkYWQgaW50csOtbnNlY2EgcGFyYSBjYW1iaWFyIHkgYWRhcHRhcnNlLCBtb2RpZmljYW5kbyBzdSBlc3RydWN0dXJhIHkgZnVuY2lvbmFtaWVudG8sIHBhcmEgcmVzcG9uZGVyIGEgbGFzIGRlbWFuZGFzIGRlbCBlbnRvcm5vLgoKICAgICAgICAgICAgICAudGFyamV0YS5iZy1jb2xvci13aGl0ZS5wLTMoeD0iNzEuOCUiIHk9IjM1LjUlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgcC5mdy1ib2xkLm1iLTMgSW50ZXJkZXBlbmRlbmNpYSBkZSBsYXMgcGFydGVzCiAgICAgICAgICAgICAgICBwLm1iLTAgQ2FkYSBlbGVtZW50byBkZWwgc2lzdGVtYSBlc3TDoSBjb25lY3RhZG8gYSBsb3MgZGVtw6FzLCBkZSBtb2RvIHF1ZSBjdWFscXVpZXIgY2FtYmlvIGVuIHVuYSBwYXJ0ZSBhZmVjdGEgYWwgcmVzdG8sIHJlc2FsdGFuZG8gbGEgbmVjZXNpZGFkIGRlIGNvb3BlcmFjacOzbiBlbnRyZSBsb3MgY29tcG9uZW50ZXMuCgogICAgICAgICAgICAgIC50YXJqZXRhLmJnLWNvbG9yLXdoaXRlLnAtMyh4PSI2My40JSIgeT0iMTguNyUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBwLmZ3LWJvbGQubWItMyBGcm9udGVyYQogICAgICAgICAgICAgICAgcC5tYi0wIFRvZG8gc2lzdGVtYSB0aWVuZSBsw61taXRlcyBxdWUgZGVmaW5lbiBxdcOpIGVsZW1lbnRvcyBwZXJ0ZW5lY2VuIGEgc3UgaW50ZXJpb3IgeSBjdcOhbGVzIGZvcm1hbiBwYXJ0ZSBkZWwgZW50b3JubyBleHRlcm5vLCBkZWxpbWl0YW5kbyBjbGFyYW1lbnRlIGFtYmFzIMOhcmVhcy4KCiAgICAgICAgICAgICAgLnRhcmpldGEuYmctY29sb3Itd2hpdGUucC0zKHg9IjI1LjYlIiB5PSIyMCUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBwLmZ3LWJvbGQubWItMyBTaXN0ZW1hIHNvY2lhbCBzdXBlcmlvcgogICAgICAgICAgICAgICAgcC5tYi0wIExhcyBvcmdhbml6YWNpb25lcyBlc3TDoW4gaW50ZWdyYWRhcyBlbiB1biBzaXN0ZW1hIHNvY2lhbCBtw6FzIGFtcGxpbywgZm9ybWFuZG8gcGFydGUgZGUgdW5hIHJlZCBjb21wbGVqYSBlbiBsYSBxdWUgY2FkYSB1bmEgY29udHJpYnV5ZSBhbCBmdW5jaW9uYW1pZW50byBkZWwgdG9kbywgbG8gcXVlIHJlcXVpZXJlIHVuIGFuw6FsaXNpcyBob2zDrXN0aWNvIHBhcmEgY29tcHJlbmRlciBzdXMgZGluw6FtaWNhcy4KCiAgICAgICAgICAgICAgLnRhcmpldGEuYmctY29sb3Itd2hpdGUucC0zKHg9IjI4LjIlIiB5PSI0Mi4zJSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgIHAuZnctYm9sZC5tYi0zIENvbXBvcnRhbWllbnRvIHByb2JhYmlsw61zdGljbyB5IGRpbsOhbWljbwogICAgICAgICAgICAgICAgcC5tYi0wIEVsIGNvbnN0YW50ZSBpbnRlcmNhbWJpbyBlbnRyZSBsYXMgb3JnYW5pemFjaW9uZXMgeSBzdSBlbnRvcm5vLCBnZW5lcmEgdW4gY29tcG9ydGFtaWVudG8gZGluw6FtaWNvLCBpbXBvc2libGUgZGUgcHJlZGVjaXIgY29uIGV4YWN0aXR1ZCwgZGViaWRvIGEgbGEgY29tcGxlamlkYWQgZGUgc3VzIGludGVyYWNjaW9uZXMuCgogICAgICAgICAgICAgIC50YXJqZXRhLmJnLWNvbG9yLXdoaXRlLnAtMyh4PSIyMy45JSIgeT0iNjkuNSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBwLmZ3LWJvbGQubWItMyBIb21lb3N0YXNpcwogICAgICAgICAgICAgICAgcC5tYi0wIEVsIGVxdWlsaWJyaW8gZXMgZnVuZGFtZW50YWwgcGFyYSBsYXMgb3JnYW5pemFjaW9uZXMsIHBlcm1pdGnDqW5kb2xlcyBhdmFuemFyIGhhY2lhIHN1cyBvYmpldGl2b3MsIG1pZW50cmFzIG1hbnRpZW5lbiBlc3RhYmlsaWRhZCB5IHNlIGFkYXB0YW4gYSBsb3MgY2FtYmlvcyBuZWNlc2FyaW9zIHBhcmEgc29icmV2aXZpciBlbiB1biBlbnRvcm5vIGNhbWJpYW50ZS4KCiAgICAjdF8yXzUudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi41XSBFbmZvcXVlIHNpdHVhY2lvbmFsIGVuIGxhIGFkbWluaXN0cmFjacOzbiBkZSBlbXByZXNhcwogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTcKICAgICAgICAgIHAubWItMyBQYXJhIHBvZGVyIHJlYWxpemFyIGVsIGVzdHVkaW8gZGUgZXN0ZSBlbmZvcXVlLCBkZWJlbW9zIHByaW1lcm8gY29ub2NlciBsYToKICAgICAgICAgIGgyLm1iLTMgVGVvcsOtYSBkZSBjb250aW5nZW5jaWFzCiAgICAgICAgICAuYmctY29sb3ItNC5wLTQubWItNAogICAgICAgICAgICBwLm1iLTAgU2Vnw7puIFDDqXJleiBDYWxsZSAoMjAyMyksIGxhcyB2YXJpYWJsZXMgY29udGluZ2VuY2lhbGVzIG3DoXMgY29ub2NpZGFzIHkgcmVsZXZhbnRlcyBwYXJhIGxvcyBlbXByZXNhcmlvcyB5IGdlcmVudGVzIGRlbCBzaWdvIFhYSSwgc29uOgogICAgICAgICAgCiAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNS5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvMzIucG5nIikgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90Mi8zMy5wbmciKQogICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgZGl2KHRpdHVsbz0iVGFtYcOxbyBkZSBsYSBvcmdhbml6YWNpw7NuIikgR2VzdGlvbmFyIHVuYSBlbXByZXNhIGNvbiBwb2NvcyBlbXBsZWFkb3Mgbm8gaW1wbGljYSBlbCBtaXNtbyBlc2Z1ZXJ6byBhZG1pbmlzdHJhdGl2byBxdWUgZGlyaWdpciB1bmEgY29uIDEwLDAwMCB0cmFiYWphZG9yZXMuIEVuIGVsIHNlZ3VuZG8gY2FzbywgZXMgbmVjZXNhcmlvIGltcGxlbWVudGFyIHVuYSBlc3RydWN0dXJhIG3DoXMgZWxhYm9yYWRhIHkgY29udGFyIGNvbiBoYWJpbGlkYWRlcyBnZXJlbmNpYWxlcyBhdmFuemFkYXMuCiAgICAgICAgICBkaXYodGl0dWxvPSJUZWNub2xvZ8OtYXMgcnV0aW5hcmlhcyIpIEVsIHVzbyBkZSB0ZWNub2xvZ8OtYXMgZXN0w6EgZGlyZWN0YW1lbnRlIHJlbGFjaW9uYWRvIGNvbiBsYSBlc3RydWN0dXJhIHkgZWwgdGFtYcOxbyBkZSBsYSBlbXByZXNhLiBBcXVlbGxhcyBjb24gbmVjZXNpZGFkZXMgdGVjbm9sw7NnaWNhcyBtw6FzIGF2YW56YWRhcyByZXF1aWVyZW4gYWp1c3RlcyBlc3BlY8OtZmljb3MgeSB1bmEgYWRlY3VhZGEgaW50ZWdyYWNpw7NuIG9wZXJhdGl2YSwgYSBkaWZlcmVuY2lhIGRlIGxhcyBvcmdhbml6YWNpb25lcyBjb24gZGVtYW5kYXMgdGVjbm9sw7NnaWNhcyBtZW5vcyBjb21wbGVqYXMgbyBubyBydXRpbmFyaWFzLgogICAgICAgICAgZGl2KHRpdHVsbz0iSW5jZXJ0aWR1bWJyZSBkZWwgZW50b3JubyIpIExvcyBjb25zdGFudGVzIGNhbWJpb3Mgc29jaWFsZXMsIGNpZW50w61maWNvcyB5IGVjb27Ds21pY29zIHByb3Bpb3MgZGUgbG9zIHRpZW1wb3MgYWN0dWFsZXMsIGdlbmVyYW4gdW4gZW50b3JubyBvcmdhbml6YWNpb25hbCBsbGVubyBkZSBpbmNlcnRpZHVtYnJlLiBMYXMgZXN0cmF0ZWdpYXMgZGVzYXJyb2xsYWRhcyBlbiBjb250ZXh0b3Mgdm9sw6F0aWxlcyBkZWJlbiByZXNwb25kZXIgY29uIHJhcGlkZXogZW4gZWwgYXByZW5kaXphamUsIGFkYXB0YWJpbGlkYWQgZXN0cnVjdHVyYWwgeSB1biBlcXVpbGlicmlvIGludGVybm8gZWZpY2F6LCBsbyBxdWUgbGFzIGRpZmVyZW5jaWEgZGUgbGFzIHF1ZSBzZSBhcGxpY2FuIGVuIGFtYmllbnRlcyBtw6FzIGVzdGFibGVzLgogICAgICAgICAgZGl2KHRpdHVsbz0iRGlmZXJlbmNpYXMgaW5kaXZpZHVhbGVzIikgTGFzIHBlcnNvbmFzIHByZXNlbnRhbiBkaXZlcnNpZGFkIGVuIHN1cyBtb3RpdmFjaW9uZXMsIG9iamV0aXZvcyB5IGV4cGVjdGF0aXZhcy4gQXVucXVlIHB1ZWRlbiBjb21wYXJ0aXIgY2llcnRvcyBwdW50b3MgZW4gY29tw7puLCBjYWRhIGluZGl2aWR1byB0aWVuZSBuZWNlc2lkYWRlcyB5IGFzcGlyYWNpb25lcyDDum5pY2FzLiBQb3IgZWxsbywgbG9zIGdlcmVudGVzIGRlYmVuIGVtcGxlYXIgZW5mb3F1ZXMgbW90aXZhY2lvbmFsZXMgZmxleGlibGVzLCBlc3RpbG9zIGRlIGxpZGVyYXpnbyBhZGFwdGFkb3MgeSBkaXNlw7FvcyBkZSB0YXJlYXMgcXVlIHJlc3BvbmRhbiBhIGxhcyBjYXJhY3RlcsOtc3RpY2FzIGVzcGVjw61maWNhcyBkZSBjYWRhIGNhc28uCgogICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIE51ZXZvcyBlbmZvcXVlcyBlbiBsYSBhZG1pbmlzdHJhY2nDs24gZGUgZW1wcmVzYXMKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTcucC01Lm1iLTUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0wLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctOQogICAgICAgICAgICBwLm1iLTAgTGEgZXJhIGRlIGxhIGluZm9ybWFjacOzbiwgcXVlIGNvbWVuesOzIGVuIGxhIGTDqWNhZGEgZGUgbG9zIDkwLCBtYXJjw7MgdW4gY2FtYmlvIHNpZ25pZmljYXRpdm8gZW4gbGFzIHByaW9yaWRhZGVzIGRlIGxhcyBvcmdhbml6YWNpb25lcy4gRWwgZGVzYXJyb2xsbyB0ZWNub2zDs2dpY28geSBsYXMgdGVjbm9sb2fDrWFzIGRlIGxhIGluZm9ybWFjacOzbiwgdHJhbnNmb3JtYXJvbiBlbCBwYW5vcmFtYSBlbXByZXNhcmlhbCwgY29sb2NhbmRvIGFsIGNvbm9jaW1pZW50byBjb21vIGVsIHJlY3Vyc28gbcOhcyB2YWxpb3NvIHkgZGVzcGxhemFuZG8gYWwgY2FwaXRhbCBmaW5hbmNpZXJvIGEgdW4gc2VndW5kbyBwbGFuby4KICAgICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTMuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90Mi8zNC5zdmciKQoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0wKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgICBwLm1iLTQgRXN0ZSBlbmZvcXVlIGVuIGVsIGNhcGl0YWwgaW50ZWxlY3R1YWwsIGZvcnRhbGVjacOzIGxhcyBwcsOhY3RpY2FzIGVtcHJlc2FyaWFsZXMsIGhhY2nDqW5kb2xhcyBtw6FzIGFkYXB0YXRpdmFzIHkgZWZpY2llbnRlcywgZnJlbnRlIGEgbG9zIGRlc2Fmw61vcyBhY3R1YWxlcy4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLmJnLWNvbG9yLTQucC00CiAgICAgICAgICAgIC5jb2wtbGctMi5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzM2LnN2ZyIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBhZG1pbmlzdHJhY2nDs24gbW9kZXJuYSBzZSBlbmN1ZW50cmEgZW4gdW4gcHJvY2VzbyBkZSByZXZpc2nDs24geSBhanVzdGUsIGVuZnJlbnRhbmRvIGxhcyBleGlnZW5jaWFzIGRlIHVuIGVudG9ybm8gZ2xvYmFsIGNvbXBsZWpvIHkgY2FtYmlhbnRlLiBFc3RlICJtdW5kbyBvcmdhbml6YWNpb25hbCIgZGVtYW5kYSBudWV2YXMgcGVyc3BlY3RpdmFzIHBhcmEgZ2VzdGlvbmFyLCBkZSBtYW5lcmEgZWZlY3RpdmEsIHN1IGludGVyYWNjacOzbiBjb24gZWwgZW50b3Juby4gQ29uIG3DoXMgZGUgdW4gc2lnbG8gZGUgZXZvbHVjacOzbiwgbGEgYWRtaW5pc3RyYWNpw7NuIGhhIGV4cGVyaW1lbnRhZG8gdHJhbnNmb3JtYWNpb25lcyBwcm9mdW5kYXMgcXVlIHJlZmxlamFuIHN1IGNvbnN0YW50ZSBhZGFwdGFjacOzbiBhIGxhcyBuZWNlc2lkYWRlcyBkZSBsb3MgdGllbXBvcy4gQ29ub3pjYW1vcyBhbGd1bmFzIGRlIGVsbGFzOgogICAgICAgICAgCiAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdDIvMzUucG5nIikgCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMi5wLTUubWItMChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIC5wLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItMChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy00LmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3QyLzM3LnN2ZyIpCiAgICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy04CiAgICAgICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgICAgICBkaXYodGl0dWxvPSJBZG1pbmlzdHJhY2nDs24gZGUgbGEgY2FsaWRhZCB0b3RhbCIpIAogICAgICAgICAgICAgICAgcC5tYi0zIERlc3B1w6lzIGRlIGxhIFNlZ3VuZGEgR3VlcnJhIE11bmRpYWwsIEphcMOzbiByZXZvbHVjaW9uw7Mgc3VzIHByb2Nlc29zIHByb2R1Y3Rpdm9zIGFsIGludHJvZHVjaXIgZWwgY29uY2VwdG8gZGUgQ2FsaWRhZCBUb3RhbCAoVFFNKSwgY29udmlydGnDqW5kb3NlIGVuIHVuIG1vZGVsbyBnbG9iYWwgZGUgZXhjZWxlbmNpYSBlbiBjYWxpZGFkLiBFc3RlIMOpeGl0byBpbnNwaXLDsyBhIGxvcyBFc3RhZG9zIFVuaWRvcyBwYXJhIGFkb3B0YXIgZXN0cmF0ZWdpYXMgc2ltaWxhcmVzLCBjb24gbGEgZ3XDrWEgZGUgRGVtaW5nLCBxdWllbiBkZW1vc3Ryw7MgY8OzbW8gbGEgbWVqb3JhIGVuIGNhbGlkYWQgcHVlZGUgcmVkdWNpciBjb3N0b3MgeSBiZW5lZmljaWFyIGEgbG9zIGNvbnN1bWlkb3JlcyAoWmFsYXphciwgMjAxMikuIAogICAgICAgICAgICAgICAgcC5tYi0wIE3DoXMgYWRlbGFudGUsIENyb3NieSBwbGFudGXDsyBsYSBlc3RyYXRlZ2lhIGRlIENlcm8gRGVmZWN0b3MsIHByaW9yaXphbmRvIGxhIHByZXZlbmNpw7NuIGRlIGVycm9yZXMgcGFyYSBhbGNhbnphciBuaXZlbGVzIMOzcHRpbW9zIGRlIGNhbGlkYWQuIFBvciBvdHJvIGxhZG8sIElzaGlrYXdhIHNpbXBsaWZpY8OzIGxvcyBtw6l0b2RvcyBlc3RhZMOtc3RpY29zLCBoYWNpw6luZG9sb3MgbcOhcyBhY2Nlc2libGVzIHkgcHLDoWN0aWNvcyBwYXJhIHN1IGltcGxlbWVudGFjacOzbiBlbiBkaXZlcnNhcyBpbmR1c3RyaWFzIGEgbml2ZWwgbXVuZGlhbCwgY29uc29saWRhbmRvIGFzw60gc3UgaW1wYWN0byBlbiBlbCBjb250cm9sIGRlIGNhbGlkYWQuCiAgICAgICAgICAgICAgZGl2KHRpdHVsbz0iR2VzdGnDs24gZGVsIGNvbm9jaW1pZW50byIpIFBldGVyIERydWNrZXIgaW50cm9kdWNlIGVsIGNvbmNlcHRvIGRlICJ0cmFiYWphZG9yIGRlIGxhIGVyYSBkZWwgY29ub2NpbWllbnRvIiwgZGVzdGFjYW5kbyBsYSByZWxldmFuY2lhIGRlbCBhcG9ydGUgaW50ZWxlY3R1YWwgc29icmUgbGEgY2FwYWNpZGFkIGbDrXNpY2EgZW4gZWwgw6FtYml0byBsYWJvcmFsLiBQbGFudGVhIHF1ZSBsb3MgcmV0b3Mgc29uIHVuIGZ1ZXJ0ZSBtb3RpdmFkb3IgcGFyYSBlc3RvcyB0cmFiYWphZG9yZXMgeSBxdWUgYXN1bWlyIHJpZXNnb3MgeSBhcHJlbmRlciBkZSBsb3MgZXJyb3JlcyBlcyBmdW5kYW1lbnRhbCBwYXJhIGVsIGNyZWNpbWllbnRvIHBlcnNvbmFsIHkgb3JnYW5pemFjaW9uYWwuIEVsIGNvbm9jaW1pZW50bywgdGFudG8gZGVsIGVtcGxlYWRvIGNvbW8gZGUgbGEgZW1wcmVzYSwgc2UgY29udmllcnRlIGVuIHVuIGVqZSBjbGF2ZSBwYXJhIGxhIHNvc3RlbmliaWxpZGFkIGVjb27Ds21pY2EuCiAgICAgICAgICAgICAgZGl2KHRpdHVsbz0iVGVvcsOtYSBkZSByZWN1cnNvcyB5IGNhcGFjaWRhZGVzIikgRW4gbG9zIGHDsW9zIDgwIHN1cmdlIGVzdGEgdGVvcsOtYSwgZW5mb2NhZGEgZW4gZWwgZGVzYXJyb2xsbyBkZSByZWN1cnNvcyBpbnRhbmdpYmxlcyB5IGNhcGFjaWRhZGVzIGVzdHJhdMOpZ2ljYXMgYSBsYXJnbyBwbGF6by4gRXN0ZSBlbmZvcXVlLCBxdWUgc2UgY29uc29saWRhIGNvbW8gdW4gcmVsZXZvIGRlIGxhIGdlc3Rpw7NuIGRlbCBjb25vY2ltaWVudG8gZW4gbG9zIGHDsW9zIDkwLCBwb3NpY2lvbmEgbGFzIGNvbXBldGVuY2lhcyBlc3BlY8OtZmljYXMgY29tbyBwaWxhcmVzIGVzZW5jaWFsZXMgcGFyYSBsYSB2ZW50YWphIGNvbXBldGl0aXZhIGVtcHJlc2FyaWFsLgogICAgICAgICAgICAgIGRpdih0aXR1bG89Ikdlc3Rpw7NuIHBvciBjb21wZXRlbmNpYXMiKSBFc3RlIG1vZGVsbyBwcm9wb25lIHByaW9yaXphciBsYXMgY29tcGV0ZW5jaWFzIGVzcGVjw61maWNhcyB2aW5jdWxhZGFzIGEgbG9zIGNhcmdvcyBlbXByZXNhcmlhbGVzLCBtw6FzIGFsbMOhIGRlIGxhcyBwZXJzb25hcy4gTGFzIGVtcHJlc2FzIGRlYmVuIGdhcmFudGl6YXIgZWwgZW50b3JubyBhZGVjdWFkbyBwYXJhIHF1ZSBsb3MgdHJhYmFqYWRvcmVzIGFwbGlxdWVuIHkgbWVqb3JlbiBzdXMgaGFiaWxpZGFkZXMuIEFkZW3DoXMsIGxhIGdlc3Rpw7NuIHkgYWN0dWFsaXphY2nDs24gY29uc3RhbnRlIGRlIGVzdGFzIGNvbXBldGVuY2lhcywgc29uIGVzZW5jaWFsZXMsIGFkYXB0w6FuZG9zZSBhIGxvcyBjYW1iaW9zIG9yZ2FuaXphY2lvbmFsZXMgYSB0cmF2w6lzIGRlIGxhIGV2YWx1YWNpw7NuIGNvbnRpbnVhIHkgZWwgY29udGFjdG8gZGlyZWN0by4KICAgICAgICAgICAgICBkaXYodGl0dWxvPSLDiXRpY2EgeSBSZXNwb25zYWJpbGlkYWQgU29jaWFsIEVtcHJlc2FyaWFsIChSU0UpIikgTGEgUlNFIHBvc2ljaW9uYSBhIGxhcyBlbXByZXNhcyBjb21vIGFnZW50ZXMgZGUgZGVzYXJyb2xsbyBzb3N0ZW5pYmxlLCBidXNjYW5kbyBjb21wZW5zYXIgc3UgaW1wYWN0byBhbWJpZW50YWwgeSBzb2NpYWwuIE3DoXMgYWxsw6EgZGUgbWl0aWdhciBkYcOxb3MsIGVzdGEgcHLDoWN0aWNhIGludGVncmEgYSBsYSBlbXByZXNhIGNvbW8gdW4gZWxlbWVudG8gZnVuZGFtZW50YWwgZGVsIHNpc3RlbWEgc29jaWFsIHkgYW1iaWVudGFsLCBwcm9tb3ZpZW5kbyB1biBlcXVpbGlicmlvIGVudHJlIHN1IHJvbCBlY29uw7NtaWNvIHkgc3UgY29tcHJvbWlzbyDDqXRpY28gY29uIGVsIGVudG9ybm8gKFphbGF6YXIsIDIwMTIpLgoKCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgogICAgICAgICAgICAvLy0gUmVmZXJlbmNpYSBjb24gZW5sYWNlIAogICAgICAgICAgICAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvYm9vay5zdmcnIDpzdHlsZT0neyJtYXgtd2lkdGgiOiIxNnB4In0nKQogICAgICAgICAgICAgIGEoaHJlZj0naHR0cHM6Ly93d3cucmVkYWx5Yy5vcmcvcGRmLzE0MC8xNDAzOTIwMTAxMC5wZGYnIHRhcmdldD0nX2JsYW5rJyByZWw9J25vb3BlbmVyIG5vcmVmZXJyZXInKSBNYW5qYXJyZXotU8OhbmNoZXosIEcuIEguICYgR3V0acOpcnJlei1QdWxpZG8sIEguICgyMDExKS4gRGlzZcOxbyBkZSBleHBlcmltZW50b3MgYXBsaWNhZG9zIGEgbGEgbWVqb3JhIGRlIHByb2Nlc29zLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvYm9vay5zdmcnIDpzdHlsZT0neyJtYXgtd2lkdGgiOiIxNnB4In0nKQogICAgICAgICAgICAgIGEoaHJlZj0naHR0cHM6Ly93d3cucmV2aXN0YWFuZmliaW9zLm9yZy9vanMvaW5kZXgucGhwL2FmYi9hcnRpY2xlL3ZpZXcvOTIvMTA4JyB0YXJnZXQ9J19ibGFuaycgcmVsPSdub29wZW5lciBub3JlZmVycmVyJykgUnVpei1BbmRyYWRlLCBKLiBHLiwgU29sw61zLVBhbGFmb3gsIEMuIEwuICYgTMOzcGV6LUx1bmEsIE4uIEEuICgyMDIxKS4gTGEgaW5jaWRlbmNpYSBkZSBsYSBwbGFuaWZpY2FjacOzbiBlc3RyYXTDqWdpY2EgZW4gZWwgZGVzZW1wZcOxbyBkZWwgbWFya2V0aW5nOiBVbmEgcmV2aXNpw7NuIGNyw610aWNhLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cuZ2VzdGlvcG9saXMuY29tL3Rlb3JpYXMtZGUtbGEtYWRtaW5pc3RyYWNpb24vIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgR2VzdGlvcG9saXMuIChzLmYuKS4gVGVvcsOtYXMgZGUgbGEgYWRtaW5pc3RyYWNpw7NuLgogICAgICAgICAgICAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cucGVycGxleGl0eS5haS8iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBQZXJwbGV4aXR5LmFpCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1OSk1QOWNva3dkWSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEllcGF0cnUwMDcuICgyMDIxKS4gTMOtbmVhIERlIFRpZW1wbyBUZW9yw61hcyBBZG1pbmlzdHJhdGl2YXMKCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCgoKCgoKCgoKCgoKCgoKCgoKCg=="},null]}