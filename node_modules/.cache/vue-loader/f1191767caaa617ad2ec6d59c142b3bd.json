{"remainingRequest":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/src/views/curso/Tema3.vue?vue&type=template&id=752457f2&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/src/views/curso/Tema3.vue","mtime":1756098407541},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_administracion/U1_Introduccion_administracion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}